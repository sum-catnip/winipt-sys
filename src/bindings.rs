/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage, Align> {
    storage: Storage,
    align: [Align; 0],
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage, align: [] }
    }
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub type wchar_t = ::std::os::raw::c_ushort;
pub type ULONG = ::std::os::raw::c_ulong;
pub type DWORD = ::std::os::raw::c_ulong;
pub type BOOL = ::std::os::raw::c_int;
pub type BYTE = ::std::os::raw::c_uchar;
pub type WORD = ::std::os::raw::c_ushort;
pub type PWORD = *mut WORD;
pub type PDWORD = *mut DWORD;
pub type DWORD64 = ::std::os::raw::c_ulonglong;
pub type PVOID = *mut ::std::os::raw::c_void;
pub type WCHAR = wchar_t;
pub type PWCHAR = *mut WCHAR;
pub type HANDLE = *mut ::std::os::raw::c_void;
pub type ULONGLONG = ::std::os::raw::c_ulonglong;
pub type DWORDLONG = ULONGLONG;
pub type BOOLEAN = BYTE;
pub type PBOOLEAN = *mut BOOLEAN;
pub const _IPT_MATCH_SETTINGS_IptMatchByAnyApp: _IPT_MATCH_SETTINGS = 0;
pub const _IPT_MATCH_SETTINGS_IptMatchByImageFileName: _IPT_MATCH_SETTINGS = 1;
pub const _IPT_MATCH_SETTINGS_IptMatchByAnyPackage: _IPT_MATCH_SETTINGS = 2;
pub const _IPT_MATCH_SETTINGS_IptMatchByPackageName: _IPT_MATCH_SETTINGS = 3;
pub type _IPT_MATCH_SETTINGS = i32;
pub use self::_IPT_MATCH_SETTINGS as IPT_MATCH_SETTINGS;
pub const _IPT_MODE_SETTINGS_IptCtlUserModeOnly: _IPT_MODE_SETTINGS = 0;
pub const _IPT_MODE_SETTINGS_IptCtlKernelModeOnly: _IPT_MODE_SETTINGS = 1;
pub const _IPT_MODE_SETTINGS_IptCtlUserAndKernelMode: _IPT_MODE_SETTINGS = 2;
pub const _IPT_MODE_SETTINGS_IptRegUserModeOnly: _IPT_MODE_SETTINGS = 3;
pub const _IPT_MODE_SETTINGS_IptRegKernelModeOnly: _IPT_MODE_SETTINGS = 4;
pub const _IPT_MODE_SETTINGS_IptRegUserAndKernelMode: _IPT_MODE_SETTINGS = 5;
pub type _IPT_MODE_SETTINGS = i32;
pub use self::_IPT_MODE_SETTINGS as IPT_MODE_SETTINGS;
pub const IPT_TIMING_SETTINGS_IptNoTimingPackets: IPT_TIMING_SETTINGS = 0;
pub const IPT_TIMING_SETTINGS_IptEnableMtcPackets: IPT_TIMING_SETTINGS = 1;
pub const IPT_TIMING_SETTINGS_IptEnableCycPackets: IPT_TIMING_SETTINGS = 2;
pub type IPT_TIMING_SETTINGS = i32;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IPT_OPTIONS {
    pub __bindgen_anon_1: _IPT_OPTIONS__bindgen_ty_1,
    pub AsULonglong: DWORDLONG,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct _IPT_OPTIONS__bindgen_ty_1 {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize], u64>,
}
#[test]
fn bindgen_test_layout__IPT_OPTIONS__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_IPT_OPTIONS__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(_IPT_OPTIONS__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_IPT_OPTIONS__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_IPT_OPTIONS__bindgen_ty_1))
    );
}
impl _IPT_OPTIONS__bindgen_ty_1 {
    #[inline]
    pub fn OptionVersion(&self) -> DWORDLONG {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u64) }
    }
    #[inline]
    pub fn set_OptionVersion(&mut self, val: DWORDLONG) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn TimingSettings(&self) -> DWORDLONG {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u64) }
    }
    #[inline]
    pub fn set_TimingSettings(&mut self, val: DWORDLONG) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn MtcFrequency(&self) -> DWORDLONG {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 4u8) as u64) }
    }
    #[inline]
    pub fn set_MtcFrequency(&mut self, val: DWORDLONG) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn CycThreshold(&self) -> DWORDLONG {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 4u8) as u64) }
    }
    #[inline]
    pub fn set_CycThreshold(&mut self, val: DWORDLONG) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn TopaPagesPow2(&self) -> DWORDLONG {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 4u8) as u64) }
    }
    #[inline]
    pub fn set_TopaPagesPow2(&mut self, val: DWORDLONG) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn MatchSettings(&self) -> DWORDLONG {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 3u8) as u64) }
    }
    #[inline]
    pub fn set_MatchSettings(&mut self, val: DWORDLONG) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn Inherit(&self) -> DWORDLONG {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_Inherit(&mut self, val: DWORDLONG) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ModeSettings(&self) -> DWORDLONG {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 4u8) as u64) }
    }
    #[inline]
    pub fn set_ModeSettings(&mut self, val: DWORDLONG) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn Reserved(&self) -> DWORDLONG {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(28usize, 36u8) as u64) }
    }
    #[inline]
    pub fn set_Reserved(&mut self, val: DWORDLONG) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(28usize, 36u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        OptionVersion: DWORDLONG,
        TimingSettings: DWORDLONG,
        MtcFrequency: DWORDLONG,
        CycThreshold: DWORDLONG,
        TopaPagesPow2: DWORDLONG,
        MatchSettings: DWORDLONG,
        Inherit: DWORDLONG,
        ModeSettings: DWORDLONG,
        Reserved: DWORDLONG,
    ) -> __BindgenBitfieldUnit<[u8; 8usize], u64> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize], u64> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let OptionVersion: u64 = unsafe { ::std::mem::transmute(OptionVersion) };
            OptionVersion as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let TimingSettings: u64 = unsafe { ::std::mem::transmute(TimingSettings) };
            TimingSettings as u64
        });
        __bindgen_bitfield_unit.set(8usize, 4u8, {
            let MtcFrequency: u64 = unsafe { ::std::mem::transmute(MtcFrequency) };
            MtcFrequency as u64
        });
        __bindgen_bitfield_unit.set(12usize, 4u8, {
            let CycThreshold: u64 = unsafe { ::std::mem::transmute(CycThreshold) };
            CycThreshold as u64
        });
        __bindgen_bitfield_unit.set(16usize, 4u8, {
            let TopaPagesPow2: u64 = unsafe { ::std::mem::transmute(TopaPagesPow2) };
            TopaPagesPow2 as u64
        });
        __bindgen_bitfield_unit.set(20usize, 3u8, {
            let MatchSettings: u64 = unsafe { ::std::mem::transmute(MatchSettings) };
            MatchSettings as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let Inherit: u64 = unsafe { ::std::mem::transmute(Inherit) };
            Inherit as u64
        });
        __bindgen_bitfield_unit.set(24usize, 4u8, {
            let ModeSettings: u64 = unsafe { ::std::mem::transmute(ModeSettings) };
            ModeSettings as u64
        });
        __bindgen_bitfield_unit.set(28usize, 36u8, {
            let Reserved: u64 = unsafe { ::std::mem::transmute(Reserved) };
            Reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout__IPT_OPTIONS() {
    assert_eq!(
        ::std::mem::size_of::<_IPT_OPTIONS>(),
        8usize,
        concat!("Size of: ", stringify!(_IPT_OPTIONS))
    );
    assert_eq!(
        ::std::mem::align_of::<_IPT_OPTIONS>(),
        8usize,
        concat!("Alignment of ", stringify!(_IPT_OPTIONS))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IPT_OPTIONS>())).AsULonglong as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IPT_OPTIONS),
            "::",
            stringify!(AsULonglong)
        )
    );
}
pub type IPT_OPTIONS = _IPT_OPTIONS;
pub type PIPT_OPTIONS = *mut _IPT_OPTIONS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IPT_TRACE_DATA {
    pub TraceVersion: WORD,
    pub ValidTrace: WORD,
    pub TraceSize: ULONG,
    pub TraceData: [BYTE; 1usize],
}
#[test]
fn bindgen_test_layout__IPT_TRACE_DATA() {
    assert_eq!(
        ::std::mem::size_of::<_IPT_TRACE_DATA>(),
        12usize,
        concat!("Size of: ", stringify!(_IPT_TRACE_DATA))
    );
    assert_eq!(
        ::std::mem::align_of::<_IPT_TRACE_DATA>(),
        4usize,
        concat!("Alignment of ", stringify!(_IPT_TRACE_DATA))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IPT_TRACE_DATA>())).TraceVersion as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IPT_TRACE_DATA),
            "::",
            stringify!(TraceVersion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IPT_TRACE_DATA>())).ValidTrace as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_IPT_TRACE_DATA),
            "::",
            stringify!(ValidTrace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IPT_TRACE_DATA>())).TraceSize as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_IPT_TRACE_DATA),
            "::",
            stringify!(TraceSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IPT_TRACE_DATA>())).TraceData as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IPT_TRACE_DATA),
            "::",
            stringify!(TraceData)
        )
    );
}
pub type IPT_TRACE_DATA = _IPT_TRACE_DATA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IPT_TRACE_HEADER {
    pub ThreadId: DWORD64,
    pub TimingSettings: IPT_TIMING_SETTINGS,
    pub MtcFrequency: DWORD,
    pub FrequencyToTscRatio: DWORD,
    pub RingBufferOffset: DWORD,
    pub TraceSize: DWORD,
    pub Trace: [BYTE; 1usize],
}
#[test]
fn bindgen_test_layout__IPT_TRACE_HEADER() {
    assert_eq!(
        ::std::mem::size_of::<_IPT_TRACE_HEADER>(),
        32usize,
        concat!("Size of: ", stringify!(_IPT_TRACE_HEADER))
    );
    assert_eq!(
        ::std::mem::align_of::<_IPT_TRACE_HEADER>(),
        8usize,
        concat!("Alignment of ", stringify!(_IPT_TRACE_HEADER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IPT_TRACE_HEADER>())).ThreadId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IPT_TRACE_HEADER),
            "::",
            stringify!(ThreadId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IPT_TRACE_HEADER>())).TimingSettings as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IPT_TRACE_HEADER),
            "::",
            stringify!(TimingSettings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IPT_TRACE_HEADER>())).MtcFrequency as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_IPT_TRACE_HEADER),
            "::",
            stringify!(MtcFrequency)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IPT_TRACE_HEADER>())).FrequencyToTscRatio as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IPT_TRACE_HEADER),
            "::",
            stringify!(FrequencyToTscRatio)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IPT_TRACE_HEADER>())).RingBufferOffset as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_IPT_TRACE_HEADER),
            "::",
            stringify!(RingBufferOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IPT_TRACE_HEADER>())).TraceSize as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IPT_TRACE_HEADER),
            "::",
            stringify!(TraceSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IPT_TRACE_HEADER>())).Trace as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_IPT_TRACE_HEADER),
            "::",
            stringify!(Trace)
        )
    );
}
pub type IPT_TRACE_HEADER = _IPT_TRACE_HEADER;
extern "C" {
    pub fn GetIptBufferVersion(pdwBufferMajorVersion: PDWORD) -> BOOL;
}
extern "C" {
    pub fn GetIptTraceVersion(pwTraceVersion: PWORD) -> BOOL;
}
extern "C" {
    pub fn GetProcessIptTraceSize(hProcess: HANDLE, pdwTraceSize: PDWORD) -> BOOL;
}
extern "C" {
    pub fn GetProcessIptTrace(hProcess: HANDLE, pTrace: PVOID, dwTraceSize: DWORD) -> BOOL;
}
extern "C" {
    pub fn StartProcessIptTracing(hProcess: HANDLE, ullOptions: IPT_OPTIONS) -> BOOL;
}
extern "C" {
    pub fn StopProcessIptTracing(hProcess: HANDLE) -> BOOL;
}
extern "C" {
    pub fn StartCoreIptTracing(
        ullOptions: IPT_OPTIONS,
        dwNumberOfTries: DWORD,
        dwTraceDurationInSeconds: DWORD,
    ) -> BOOL;
}
extern "C" {
    pub fn RegisterExtendedImageForIptTracing(
        pwszImagePath: PWCHAR,
        pwszFilteredPath: PWCHAR,
        ullOptions: IPT_OPTIONS,
        dwNumberOfTries: DWORD,
        dwTraceDurationInSeconds: DWORD,
    ) -> BOOL;
}
extern "C" {
    pub fn PauseThreadIptTracing(hThread: HANDLE, pbResult: PBOOLEAN) -> BOOL;
}
extern "C" {
    pub fn ResumeThreadIptTracing(hThread: HANDLE, pbResult: PBOOLEAN) -> BOOL;
}
extern "C" {
    pub fn QueryProcessIptTracing(hProcess: HANDLE, pullOptions: PIPT_OPTIONS) -> BOOL;
}
extern "C" {
    pub fn QueryCoreIptTracing(pullOptions: PIPT_OPTIONS) -> BOOL;
}
